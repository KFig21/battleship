{"version":3,"sources":["components/Header.js","components/GridPosition.js","components/Gameboard.js","data/ShipData.js","data/CpuShipData.js","components/Notification.js","App.js","index.js"],"names":["Header","className","GridPosition","board","coords","placeShip","switchPlayer","currentPlayer","gameStarted","handleHover","isHovering","cpuIsHovering","cpuShips","setText","cpuBoard","setCpuBoard","gameOver","gameWon","notification","document","getElementById","classname","includes","shotOutcome","currentBoard","i","length","j","style","backgroundColor","health","color","status","shipId","k","size","every","ship","onClick","e","preventDefault","handleClick","onMouseEnter","id","Gameboard","player","shipToPlace","onHover","push","grid","ShipData","key","CpuShipData","Notification","turn","text","App","useState","setTurn","setCurrentPlayer","boardReady","setBoardReady","setGameWon","setGameStarted","ships","setShips","shipToPlaceIndex","setShipToPlaceIndex","setShipToPlace","setIsHovering","playerBoard","setPlayerBoard","cpuReady","setCpuReady","setCpuShips","cpuShipToPlaceIndex","setCpuShipToPlaceIndex","cpuShipToPlace","setCpuShipToPlace","setCpuIsHovering","onTarget","setOnTarget","targetValue","setTargetValue","isVertical","setIsVertical","axis","setAxis","prev","useEffect","setTimeout","cpuTurn","attack","console","log","preferredTargets","getPreferredTargets","preferredIndex","Math","floor","random","splice","undefined","targets","getTargets","index","findRandomTarget","checkIfOnTarget","leftoverTargets","indexOf","target","targs","startGame","refresh","validateShip","start","end","checkShips","some","placeCPUship","tryAgain","coordinate","increment","coordinates","currentShips","parseInt","window","location","reload","movement","coordId","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ce7be95e.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';  \r\n\r\nfunction Header() {\r\n  \r\n  return (\r\n    <header>\r\n      <span className=\"header-game-name\">Battleship</span>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst GridPosition = ({\r\n    board, \r\n    coords, \r\n    placeShip, \r\n    switchPlayer, \r\n    currentPlayer, \r\n    gameStarted,\r\n    handleHover,\r\n    isHovering = [],\r\n    cpuIsHovering = [],\r\n    cpuShips,\r\n    setText,\r\n    cpuBoard,\r\n    setCpuBoard,\r\n    gameOver,\r\n    gameWon\r\n    }) => {\r\n\r\n    const notification = document.getElementById(\"notification\");\r\n\r\n    let classname = 'square';\r\n    if (isHovering) {\r\n        classname += isHovering.includes(coords) ? ' hover-ship' : '';\r\n    }\r\n    \r\n    if (cpuIsHovering) {\r\n        classname += cpuIsHovering.includes(coords) ? ' hover-aim' : '';\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        if(gameWon) return\r\n        if(currentPlayer === \"Computer\") return\r\n        if(!gameStarted && board === \"Player\"){\r\n            e.preventDefault();\r\n            placeShip(coords)\r\n        }\r\n        if(board === \"Computer\"){\r\n            e.preventDefault();\r\n            shotOutcome();\r\n        }\r\n    };\r\n\r\n    const shotOutcome = () => {\r\n        if (board === \"Computer\"){\r\n            if(cpuBoard.includes(coords)) return\r\n            setCpuBoard((currentBoard) => [...currentBoard, coords])\r\n            for(let i = 0; i < cpuShips.length; i++){\r\n                for(let j = 0; j < cpuShips[i].coords.length; j++){\r\n                    if (cpuShips[i].coords[j] === coords){\r\n                        document.getElementById(`${board}-${coords}`).style.backgroundColor = \"var(--alertRed)\";\r\n                        cpuShips[i].health --;\r\n                        setText(`Attack Status: HIT! [${coords}]`);\r\n                        notification.style.color = \"var(--successGreen)\";\r\n                        if(cpuShips[i].health === 0){\r\n                            cpuShips[i].status = \"sunk\";\r\n                            setText(`Attack Status: HIT! you sunk their ${cpuShips[i].shipId}!`);\r\n                            notification.style.color = \"var(--successGreen)\";\r\n                            for(let k = 0; k < cpuShips[i].size; k++){\r\n                                document.getElementById(`${board}-${cpuShips[i].coords[k]}`).style.backgroundColor = \"darkred\";\r\n                            }\r\n                        }\r\n                        if(cpuShips.every(ship => ship.status === \"sunk\")){\r\n                            gameOver(\"Player\");\r\n                        }\r\n                        switchPlayer();\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n            setText(`Attack Status: MISS! [${coords}]`);\r\n            notification.style.color = \"var(--primary-light)\";\r\n            document.getElementById(`${board}-${coords}`).style.backgroundColor = \"var(--miss)\"\r\n            switchPlayer();\r\n        }\r\n    }\r\n\r\n    const hoverPositions = () => {\r\n        if(board === \"Player\"){\r\n            if (!handleHover) return;\r\n            handleHover(coords);\r\n        } else if (board === \"Computer\"){\r\n            if (!handleHover) return;\r\n            handleHover(coords)\r\n        }\r\n      };\r\n\r\n    return(\r\n        <div \r\n            className={`grid-square ${board} ${classname}`}\r\n            onClick={(e) => handleClick(e)}\r\n            onMouseEnter={hoverPositions}\r\n            id={`${board}-${coords}`}\r\n        />\r\n    )\r\n}\r\n\r\nexport default GridPosition","import React from \"react\";\r\nimport GridPosition from \"./GridPosition\";\r\nimport '../App.css'; \r\n\r\nfunction Gameboard({\r\n        player, \r\n        switchPlayer, \r\n        currentPlayer, \r\n        gameStarted, \r\n        shipToPlace, \r\n        onHover,\r\n        isHovering,\r\n        placeShip,\r\n        cpuIsHovering,\r\n        cpuShips,\r\n        setText,\r\n        cpuBoard,\r\n        setCpuBoard,\r\n        gameOver,\r\n        gameWon\r\n    }) {\r\n\r\n    const grid = () => {\r\n        let board = []\r\n        for(let i = 0; i < 10; i++){\r\n            for( let j = 0; j < 10; j++){\r\n                if (player === \"Player\"){\r\n                    board.push(\r\n                        <GridPosition \r\n                            board={player}\r\n                            coords={(j+(i*10))}\r\n                            placeShip={placeShip}\r\n                            switchPlayer={switchPlayer}\r\n                            currentPlayer={currentPlayer}\r\n                            gameStarted={gameStarted}\r\n                            shipToPlace={shipToPlace}\r\n                            key={`${j} ${i}`} \r\n                            handleHover={onHover}\r\n                            isHovering={isHovering}\r\n                            gameWon={gameWon}\r\n                        />)\r\n                } else if (player === \"Computer\"){\r\n                    board.push(\r\n                        <GridPosition \r\n                            board={player}\r\n                            coords={(j+(i*10))}\r\n                            placeShip={placeShip}\r\n                            switchPlayer={switchPlayer}\r\n                            currentPlayer={currentPlayer}\r\n                            gameStarted={gameStarted}\r\n                            shipToPlace={shipToPlace}\r\n                            key={`${j} ${i}`} \r\n                            handleHover={onHover}\r\n                            cpuIsHovering={cpuIsHovering}\r\n                            cpuShips={cpuShips} \r\n                            setText={setText}\r\n                            setCpuBoard={setCpuBoard}\r\n                            cpuBoard={cpuBoard}  \r\n                            gameOver={gameOver}\r\n                            gameWon={gameWon}\r\n                        />)\r\n                }\r\n            }\r\n        }\r\n        return board\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <span className=\"board-name\">{player}'s board</span>\r\n            <div className={`game-board ${player}-board`}>{ grid() }</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gameboard;","const ShipData = [\r\n    {\r\n        size: 5,\r\n        shipId: \"Carrier\",\r\n        className: \"Carrier\",\r\n        key: 0,\r\n        coords: [],\r\n        health: 5,\r\n        status: \"deployed\"\r\n    },\r\n    {\r\n        size: 4,\r\n        shipId: \"Battleship\",\r\n        className: \"Battleship\",\r\n        key: 1,\r\n        coords: [],\r\n        health: 4,\r\n        status: \"deployed\"\r\n    },\r\n    {\r\n        size: 3,\r\n        shipId: \"Destroyer\",\r\n        className: \"Destroyer\",\r\n        key: 2,\r\n        coords: [],\r\n        health: 3,\r\n        status: \"deployed\"\r\n    },\r\n    {\r\n        size: 3,\r\n        shipId: \"Submarine\",\r\n        className: \"Submarine\",\r\n        key: 3,\r\n        coords: [],\r\n        health: 3,\r\n        status: \"deployed\"\r\n    },\r\n    {\r\n        size: 2,\r\n        shipId: \"Patroler\",\r\n        className: \"Patroler\",\r\n        key: 4,\r\n        coords: [],\r\n        health: 2,\r\n        status: \"deployed\"\r\n    },\r\n]\r\n\r\nexport default ShipData;","const CpuShipData = [\r\n    {\r\n        size: 5,\r\n        shipId: \"Carrier\",\r\n        className: \"Carrier\",\r\n        key: 0,\r\n        coords: [],\r\n        health: 5,\r\n        status: \"deployed\"\r\n    },\r\n    {\r\n        size: 4,\r\n        shipId: \"Battleship\",\r\n        className: \"Battleship\",\r\n        key: 1,\r\n        coords: [],\r\n        health: 4,\r\n        status: \"deployed\"\r\n    },\r\n    {\r\n        size: 3,\r\n        shipId: \"Destroyer\",\r\n        className: \"Destroyer\",\r\n        key: 2,\r\n        coords: [],\r\n        health: 3,\r\n        status: \"deployed\"\r\n    },\r\n    {\r\n        size: 3,\r\n        shipId: \"Submarine\",\r\n        className: \"Submarine\",\r\n        key: 3,\r\n        coords: [],\r\n        health: 3,\r\n        status: \"deployed\"\r\n    },\r\n    {\r\n        size: 2,\r\n        shipId: \"Patroler\",\r\n        className: \"Patroler\",\r\n        key: 4,\r\n        coords: [],\r\n        health: 2,\r\n        status: \"deployed\"\r\n    },\r\n]\r\n\r\nexport default CpuShipData;","import React from \"react\";\r\n\r\nconst Notification = ({turn, text}) => {\r\n    return(\r\n        <div className=\"notification-container\">\r\n            <span className=\"notification\" id=\"notification\">\r\n                {text}\r\n            </span>\r\n            <span className=\"header-turn-count\">Turn: {turn}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification;","import \"./App.css\";\nimport Header from \"./components/Header\";\nimport Gameboard from \"./components/Gameboard\";\nimport ShipData from \"./data/ShipData\";\nimport CpuShipData from \"./data/CpuShipData\";\nimport Notification from \"./components/Notification\";\nimport React, { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [turn, setTurn] = useState(0);\n  const [currentPlayer, setCurrentPlayer] = useState(\"Player\");\n  const [boardReady, setBoardReady] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [ships, setShips] = useState([]);\n  const [shipToPlaceIndex, setShipToPlaceIndex] = useState(0);\n  const [shipToPlace, setShipToPlace] = useState(ShipData[shipToPlaceIndex]);\n  const [isHovering, setIsHovering] = useState([]);\n  const [playerBoard, setPlayerBoard] = useState([]);\n  const [cpuReady, setCpuReady] = useState(false);\n  const [cpuShips, setCpuShips] = useState([]);\n  const [cpuShipToPlaceIndex, setCpuShipToPlaceIndex] = useState(0);\n  const [cpuShipToPlace, setCpuShipToPlace] = useState(\n    CpuShipData[cpuShipToPlaceIndex]\n  );\n  const [cpuIsHovering, setCpuIsHovering] = useState([]);\n  const [cpuBoard, setCpuBoard] = useState([]);\n  const [onTarget, setOnTarget] = useState(false);\n  const [targetValue, setTargetValue] = useState([]);\n  const [text, setText] = useState(`Place your ${shipToPlace.shipId}!`);\n  const [isVertical, setIsVertical] = useState(false);\n  const [axis, setAxis] = useState(\"Vertical\");\n  const notification = document.getElementById(\"notification\");\n\n  const switchPlayer = () => {\n    setCurrentPlayer(currentPlayer === \"Player\" ? \"Computer\" : \"Player\");\n    setTurn((prev) => prev + 1);\n  };\n\n  useEffect(() => {\n    if (gameWon) return;\n    if (currentPlayer === \"Computer\") {\n      setTimeout(() => cpuTurn(), 2000);\n    }\n  }, [currentPlayer]);\n\n  const cpuTurn = () => {\n    if (gameWon) return;\n    let attack = \"\";\n    console.log(\"onTarget\", onTarget);\n    // checks if on target (if any ships are hit)\n    if (!onTarget) {\n      attack = findRandomTarget();\n    } else if (onTarget) {\n      // checks for preffered targets\n      let preferredTargets = getPreferredTargets();\n      if (preferredTargets.length > 0) {\n        let preferredIndex = Math.floor(\n          Math.random() * preferredTargets.length\n        );\n        attack = preferredTargets[preferredIndex];\n        // checks to see if any of the preferred targets are valid\n        while (playerBoard.includes(attack) && preferredTargets.length > 0) {\n          // if the selected preferred target isnt valid it removes it from the array and selects another\n          preferredTargets.splice(preferredIndex, 1);\n          preferredIndex = Math.floor(Math.random() * preferredTargets.length);\n          attack = preferredTargets[preferredIndex];\n          // when multiple boats are stacked next to each other, the AI can get confused as to where its able to attack. In certain situations it may think its on target but prefferedTargets() is returning nothing. Therefore, if it is still on target without any preferred targets, it will still return an adjacent target\n          if (onTarget && attack === undefined) {\n            console.log(\n              \"Player boats have been stacked next to each other, keep firing on adjacent targets!\"\n            );\n            let targets = getTargets(targetValue);\n            let index = Math.floor(Math.random() * targets.length);\n            attack = targets[index];\n            while (playerBoard.includes(attack)) {\n              index = Math.floor(Math.random() * targets.length);\n              attack = targets[index];\n            }\n          }\n        }\n      } else {\n        //if there are no preferred targets it selects a random target that is adjacent to a cell that is marked as a hit\n        let targets = getTargets(targetValue);\n        let index = Math.floor(Math.random() * targets.length);\n        attack = targets[index];\n        while (playerBoard.includes(attack)) {\n          index = Math.floor(Math.random() * targets.length);\n          attack = targets[index];\n        }\n      }\n    }\n\n    console.log(\"attack: \" + attack);\n    console.log(\"----------------\");\n    setPlayerBoard((currentBoard) => [...currentBoard, attack]);\n    for (let i = 0; i < ships.length; i++) {\n      for (let j = 0; j < ships[i].coords.length; j++) {\n        if (ships[i].coords[j] === attack) {\n          document.getElementById(`Player-${attack}`).style.backgroundColor =\n            \"var(--alertRed)\";\n          ships[i].health--;\n          setText(`Attack Status: You've been HIT! [${attack}]`);\n          notification.style.color = \"var(--alertRed)\";\n          setTargetValue((prev) => [...prev, attack]);\n          console.log(\"adding targets: \" + attack);\n          setOnTarget(true);\n          if (ships[i].health === 0) {\n            ships[i].status = \"sunk\";\n            setText(`Attack Status: HIT! They sunk your ${ships[i].shipId}!`);\n            notification.style.color = \"var(--alertRed)\";\n            checkIfOnTarget(ships[i]);\n            for (let k = 0; k < ships[i].size; k++) {\n              document.getElementById(\n                `Player-${ships[i].coords[k]}`\n              ).style.backgroundColor = \"darkred\";\n            }\n          }\n          if (ships.every((ship) => ship.status === \"sunk\")) {\n            gameOver(\"Computer\");\n          }\n          switchPlayer();\n          return;\n        }\n      }\n    }\n    setText(`Attack Status: CPU MISS! [${attack}]`);\n    notification.style.color = \"var(--primary-light)\";\n    document.getElementById(`Player-${attack}`).style.backgroundColor =\n      \"var(--miss)\";\n    switchPlayer();\n    return;\n  };\n\n  const checkIfOnTarget = (ship) => {\n    console.log(\"check if on target: \" + ship.shipId);\n    let leftoverTargets = targetValue;\n    for (let i = 0; i < ship.coords.length; i++) {\n      if (leftoverTargets.includes(ship.coords[i])) {\n        const index = targetValue.indexOf(ship.coords[i]);\n        leftoverTargets.splice(index, 1);\n        console.log(\"removing targets: \" + ship.coords[i]);\n        console.log(\"leftover targets: \" + leftoverTargets);\n      }\n    }\n    setTargetValue(leftoverTargets);\n    if (targetValue.length === 0) {\n      setOnTarget(false);\n      setTargetValue([]);\n    }\n    return;\n  };\n\n  const findRandomTarget = () => {\n    let target = Math.floor(Math.random() * 100);\n    while (playerBoard.includes(target)) {\n      target = Math.floor(Math.random() * 100);\n    }\n    return target;\n  };\n\n  const getTargets = (targs) => {\n    console.log(\"targetvalue in getTargets: \" + targetValue);\n    let targets = [];\n    for (let i = 0; i < targs.length; i++) {\n      // top left corner = 0\n      if (targs[i] === 0) {\n        targets.push(1);\n        targets.push(10);\n        // bottom right corner = 99\n      } else if (targs[i] === 99) {\n        targets.push(89);\n        targets.push(98);\n        // top right corner = 9\n      } else if (targs[i] === 9) {\n        targets.push(8);\n        targets.push(19);\n        // bottom left corner = 90\n      } else if (targs[i] === 90) {\n        targets.push(80);\n        targets.push(91);\n        // top row, not including 0 or 9\n      } else if (targs[i] < 9) {\n        targets.push(targs[i] - 1);\n        targets.push(targs[i] + 1);\n        targets.push(targs[i] + 10);\n        // bottom row, not including 90 or 99\n      } else if (targs[i] > 90) {\n        targets.push(targs[i] - 1);\n        targets.push(targs[i] + 1);\n        targets.push(targs[i] - 10);\n        // left side, not including 0 or 90\n      } else if (targs % 10 === 0) {\n        targets.push(targs[i] + 1);\n        targets.push(targs[i] - 10);\n        targets.push(targs[i] + 10);\n        // right side, not including 9 or 99\n      } else if ((targs[i] + 1) % 10 === 0) {\n        targets.push(targs[i] - 1);\n        targets.push(targs[i] - 10);\n        targets.push(targs[i] + 10);\n        // remaining\n      } else {\n        targets.push(targs[i] - 1);\n        targets.push(targs[i] + 1);\n        targets.push(targs[i] - 10);\n        targets.push(targs[i] + 10);\n      }\n    }\n    if (targets.every((target) => playerBoard.includes(target))) {\n      targets = findRandomTarget();\n    }\n    return targets;\n  };\n\n  const getPreferredTargets = () => {\n    if (targetValue.length < 2) return [];\n    const preferredTargets = [];\n    for (let i = 0; i < targetValue.length; i++) {\n      for (let j = 0; j < targetValue.length; j++) {\n        // 2 hits horizontally next to each other\n        if (targetValue[i] === targetValue[j] + 1) {\n          // check if targetValue is a right-side edge case\n          if (targetValue[i] + (1 % 10) !== 0) {\n            preferredTargets.push(targetValue[i] + 1);\n          }\n          // check if targetValue is a left-side edge case\n          if (targetValue[j] % 10 !== 0) {\n            preferredTargets.push(targetValue[j] - 1);\n          }\n        }\n        // 2 hits vertically next to each other\n        if (targetValue[i] === targetValue[j] + 10) {\n          // check if targetValue is a bottom-side edge case\n          if (targetValue[i] + 10 < 100) {\n            preferredTargets.push(targetValue[i] + 10);\n          }\n          // check if targetValue is a top-side edge case\n          if (targetValue[j] - 10 >= 0) {\n            preferredTargets.push(targetValue[j] - 10);\n          }\n        }\n      }\n    }\n    console.log(\"preferredTargets: \" + preferredTargets);\n    return preferredTargets;\n  };\n\n  const startGame = () => {\n    if (boardReady && !gameWon) {\n      setGameStarted(true);\n    } else if (gameWon) {\n      refresh();\n    }\n  };\n\n  const handleHoverEffects = (coords) => {\n    if (gameStarted) return;\n    const ship = shipToPlace;\n    const coordinates = [coords];\n    const movement = isVertical ? 10 : 1;\n    if (isVertical) {\n      for (let i = 1; i < ship.size; i++) {\n        coordinates.push(parseInt(coords) + parseInt(i * movement));\n      }\n    } else {\n      for (let i = 1; i < ship.size && (coords + i) % 10 !== 0; i++) {\n        coordinates.push(parseInt(coords) + parseInt(i * movement));\n      }\n    }\n    setIsHovering(coordinates);\n  };\n\n  const placeShip = (coords) => {\n    const ship = shipToPlace;\n    const movement = isVertical ? 10 : 1;\n    const coordinates = [coords];\n    for (let i = 1; i < ship.size; i++) {\n      coordinates.push(parseInt(coords) + parseInt(i * movement));\n    }\n    if (validateShip(coordinates, \"Player\")) {\n      setShips((currentShips) => {\n        return [...currentShips, ship];\n      });\n      ship.coords = coordinates;\n      for (let i = 0; i < coordinates.length; i++) {\n        let coordId = coordinates[i];\n        document.getElementById(`Player-${coordId}`).style.backgroundColor =\n          \"var(--ship)\";\n      }\n      setShipToPlaceIndex((prev) => parseInt(prev + 1));\n    } else {\n      return;\n    }\n  };\n\n  const validateShip = (coords, player) => {\n    let start = coords[0];\n    let end = coords[coords.length - 1];\n    // check for edges\n    if (end >= 100 || start % 10 > end % 10) return false;\n    //check for other ships\n    let checkShips = player === \"Player\" ? ships : cpuShips;\n    for (let i = 0; i < coords.length; i++) {\n      if (checkShips.some((ship) => ship.coords.includes(coords[i]))) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // sets the next ship to place\n  useEffect(() => {\n    if (!gameStarted) {\n      if (shipToPlaceIndex < 5) {\n        setShipToPlace(ShipData[shipToPlaceIndex]);\n        setText(`Place your ${shipToPlace.shipId}!`);\n      } else {\n        setGameStarted(true);\n        setIsHovering([]);\n        setText(\"Launch an attack!\");\n      }\n    }\n  });\n\n  // set cpu board\n  useEffect(() => {\n    if (gameStarted && !cpuReady) {\n      if (cpuShips.length <= 5) {\n        setCpuShipToPlace(CpuShipData[cpuShipToPlaceIndex]);\n        placeCPUship();\n      } else {\n        setCpuReady(true);\n        // show cpu ship location, delete when done\n        // for(let i = 0; i < cpuShips.length; i++){\n        //   for(let j = 0; j < cpuShips[i].coords.length; j++){\n        //     let coordId = cpuShips[i].coords[j];\n        //     document.getElementById(`Computer-${coordId}`).style.backgroundColor = \"grey\";\n        //   }\n        // }\n      }\n    }\n  });\n\n  // if cpu tries to place an invalid ship\n  const tryAgain = () => {\n    placeCPUship();\n  };\n\n  const placeCPUship = () => {\n    let ship = cpuShipToPlace;\n    let coordinate = Math.floor(Math.random() * 98);\n    const axisArr = [1, 10];\n    const increment = axisArr[Math.floor(Math.random() * 2)];\n    const coordinates = [coordinate];\n    for (let j = 1; j < cpuShipToPlace.size; j++) {\n      coordinates.push(coordinate + j * increment);\n    }\n    if (validateShip(coordinates, \"Computer\")) {\n      setCpuShips((currentShips) => {\n        return [...currentShips, ship];\n      });\n      ship.coords = coordinates;\n    } else {\n      tryAgain();\n      return;\n    }\n    setCpuShipToPlaceIndex((prev) => parseInt(prev + 1));\n  };\n\n  const cpuHandleHoverEffects = (coords) => {\n    if (!cpuReady) return;\n    const target = [coords];\n    setCpuIsHovering(target);\n  };\n\n  const changeAxis = () => {\n    setAxis(axis === \"Vertical\" ? \"Horizontal\" : \"Vertical\");\n    setIsVertical(isVertical === false ? true : false);\n  };\n\n  const gameOver = (player) => {\n    setText(`Game over! ${player} wins!`);\n    if (player === \"Computer\") {\n      notification.style.color = \"var(--alertRed)\";\n    }\n    setGameWon(true);\n  };\n\n  const refresh = () => {\n    window.location.reload();\n    notification.style.color = \"var(--primary-light)\";\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Notification\n        turn={turn}\n        startGame={startGame}\n        text={text}\n        shipToPlace={shipToPlace}\n      />\n      <div className=\"boards-container\">\n        <Gameboard\n          player=\"Player\"\n          switchPlayer={switchPlayer}\n          currentPlayer={currentPlayer}\n          gameStarted={gameStarted}\n          setBoardReady={setBoardReady}\n          setGameWon={setGameWon}\n          shipToPlace={shipToPlace}\n          setShipToPlace={setShipToPlace}\n          onHover={handleHoverEffects}\n          isHovering={isHovering}\n          placeShip={placeShip}\n        />\n        {gameStarted && (\n          <Gameboard\n            player=\"Computer\"\n            switchPlayer={switchPlayer}\n            currentPlayer={currentPlayer}\n            gameStarted={gameStarted}\n            setBoardReady={setBoardReady}\n            setGameWon={setGameWon}\n            cpuIsHovering={cpuIsHovering}\n            onHover={cpuHandleHoverEffects}\n            cpuShips={cpuShips}\n            setText={setText}\n            setCpuBoard={setCpuBoard}\n            cpuBoard={cpuBoard}\n            gameOver={gameOver}\n            gameWon={gameWon}\n          />\n        )}\n      </div>\n      <div className=\"lower-container\">\n        {/* <ShipYard /> */}\n        {!gameStarted && (\n          <button className=\"orientation-button\" onClick={changeAxis}>\n            Set {axis}\n          </button>\n        )}\n        {gameWon && (\n          <button className=\"orientation-button\" onClick={startGame}>\n            Play Again\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}